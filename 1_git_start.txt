Git. Старт

Содержание

Введение

Настройка Git
    config
    Имя пользователя

________________________________

Введение

Что нужно понять при начале работы с Git. Без него программисту существовать было нельзя и раньше — но до его появления (или вернее до появления систем контроля версий), с теми или иными ухищрениями (архивы, бэкапы, и т.д.) — неполноценно, но можно. Современному же программисту нужно учиться обращению с Git чуть ли не с первого "hello, world". Также нужно понимать, что Git — обширная программа, и всех ее глубин достигнуть возможно и не получится. Но навыки работы с Git, для уверенного пребывания в каждом цикле разработки программ, должны быть безупречны. Я сравниваю обычно Git с Microsoft Word или Excel. Git также прост как эти программы для 90% пользователей, ну а что открыл и печатаешь, или открыл — таблички создаешь. Но уже даже само использование Word поднимает вас на несколько ступеней вверх, относительно людей редактирующих и печатающих в Блокноте, с этим никто, пожалуй, спорить не будет. А для остальных 10% пользователей в перечисленных программах тоже хватает такого, от чего голова может заболеть, если ты из другой группы (той, что побольше).

Согласно сказанному — открываем Git и:

    - делаем снимки состояния разработки, 
    - создаем ветки разработки, 
    - сливаем нужные ветки в одну, 
    - удаляем ненужные ветки. 

Пока, пожалуй, только это. Остальное после. Скорей всего, рост мастерства в программировании, причем экспоненциальный, вам будет обеспечен уже на данном этапе. [Сказал, как понял]

Самые сложнорешаемые проблемы и конфликты возникают при работе с Git во время команд различных отмен. Конечно с ростом мастерства вы научитесь решать 99% всех возможных проблем, но пока вы начинаете имеет смысл ещё раз проверить содержимое проекта, прежде чем его коммитить. [Сказал, как понял]


_______________________________________

Настройка Git

config

    В состав Git входит утилита git config, которая позволяет просматривать и настраивать параметры, контролирующие все аспекты работы Git, а также его внешний вид.

Чтобы посмотреть все установленные настройки и узнать где именно они заданы, используйте команду:

$ git config --list --show-origin

Предустановленным текстовым редактором окна Git Bash, скорей всего будет Vim. Чтобы выйти из листинга выведенного вышеупомянутой коммандой, нужно нажать на клавиатуре q в английской раскладке. Как установить другой текстовый редактор, упомянем позднее.
_______________________________________

Имя пользователя

Первое, что вам следует сделать после установки Git — указать ваше имя и адрес электронной почты. Это важно, потому что каждый коммит в Git содержит эту информацию, и она включена в коммиты, передаваемые вами, и не может быть далее изменена:

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
Опять же, если указана опция --global, то эти настройки достаточно сделать только один раз, поскольку в этом случае Git будет использовать эти данные для всего, что вы делаете в этой системе. Если для каких-то отдельных проектов вы хотите указать другое имя или электронную почту, можно выполнить эту же команду без параметра --global в каталоге с нужным проектом.

_______________________________________

Выбор редактора
Теперь, когда вы указали своё имя, самое время выбрать текстовый редактор, который будет использоваться, если будет нужно набрать сообщение в Git. По умолчанию Git использует стандартный редактор вашей системы, которым обычно является Vim. Если вы хотите использовать другой текстовый редактор, например, Emacs, можно проделать следующее:

$ git config --global core.editor emacs
В системе Windows следует указывать полный путь к исполняемому файлу при установке другого текстового редактора по умолчанию. Пути могут отличаться в зависимости от того, как работает инсталлятор.

В случае с Notepad++, популярным редактором, скорее всего вы захотите установить 32-битную версию, так как 64-битная версия ещё не поддерживает все плагины. Если у вас 32-битная Windows или 64-битный редактор с 64-битной системой, то выполните следующее:

$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

_______________________________________

Инициализация (создание) репозитория

init

Проверка состояния репозитория

status

Добавление в индекс (сцену)

add

Создание коммита (снимка состояния репозитория)

commit

***_________________________________

Следующий уровень в создании описания коммита — создание описание на основе заданного шаблона.
Для этого: 

_________________________________

log
checkout
show

_______________________________________

Создание репозитория на Github (удаленный, он же remote-репозиторий).




